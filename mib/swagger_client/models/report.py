# coding: utf-8

"""
    Users

    Microservice that provide users' data management.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mib.swagger_client.configuration import Configuration


class Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'author_email': 'str',
        'reported_email': 'str',
        'description': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        'id': 'id',
        'author_email': 'author_email',
        'reported_email': 'reported_email',
        'description': 'description',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, author_email=None, reported_email=None, description=None, timestamp=None, _configuration=None):  # noqa: E501
        """Report - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._author_email = None
        self._reported_email = None
        self._description = None
        self._timestamp = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.author_email = author_email
        self.reported_email = reported_email
        self.description = description
        self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this Report.  # noqa: E501


        :return: The id of this Report.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.


        :param id: The id of this Report.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def author_email(self):
        """Gets the author_email of this Report.  # noqa: E501


        :return: The author_email of this Report.  # noqa: E501
        :rtype: str
        """
        return self._author_email

    @author_email.setter
    def author_email(self, author_email):
        """Sets the author_email of this Report.


        :param author_email: The author_email of this Report.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and author_email is None:
            raise ValueError("Invalid value for `author_email`, must not be `None`")  # noqa: E501

        self._author_email = author_email

    @property
    def reported_email(self):
        """Gets the reported_email of this Report.  # noqa: E501


        :return: The reported_email of this Report.  # noqa: E501
        :rtype: str
        """
        return self._reported_email

    @reported_email.setter
    def reported_email(self, reported_email):
        """Sets the reported_email of this Report.


        :param reported_email: The reported_email of this Report.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and reported_email is None:
            raise ValueError("Invalid value for `reported_email`, must not be `None`")  # noqa: E501

        self._reported_email = reported_email

    @property
    def description(self):
        """Gets the description of this Report.  # noqa: E501


        :return: The description of this Report.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Report.


        :param description: The description of this Report.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def timestamp(self):
        """Gets the timestamp of this Report.  # noqa: E501


        :return: The timestamp of this Report.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Report.


        :param timestamp: The timestamp of this Report.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Report):
            return True

        return self.to_dict() != other.to_dict()
