# coding: utf-8

"""
    Users

    Microservice that provide users' data management.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: you@your-company.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from monolith.swagger_client.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'email': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'password': 'str',
        'date_of_birth': 'str',
        'points': 'int',
        'content_filter': 'bool',
        'is_admin': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'password': 'password',
        'date_of_birth': 'date_of_birth',
        'points': 'points',
        'content_filter': 'content_filter',
        'is_admin': 'is_admin'
    }

    def __init__(self, id=None, email=None, firstname=None, lastname=None, password=None, date_of_birth=None, points=None, content_filter=False, is_admin=False, _configuration=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._email = None
        self._firstname = None
        self._lastname = None
        self._password = None
        self._date_of_birth = None
        self._points = None
        self._content_filter = None
        self._is_admin = None
        self.discriminator = None

        self.id = id
        if email is not None:
            self.email = email
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if password is not None:
            self.password = password
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if points is not None:
            self.points = points
        if content_filter is not None:
            self.content_filter = content_filter
        if is_admin is not None:
            self.is_admin = is_admin

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def firstname(self):
        """Gets the firstname of this User.  # noqa: E501


        :return: The firstname of this User.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this User.


        :param firstname: The firstname of this User.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this User.  # noqa: E501


        :return: The lastname of this User.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this User.


        :param lastname: The lastname of this User.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501


        :return: The password of this User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this User.  # noqa: E501


        :return: The date_of_birth of this User.  # noqa: E501
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this User.


        :param date_of_birth: The date_of_birth of this User.  # noqa: E501
        :type: str
        """

        self._date_of_birth = date_of_birth

    @property
    def points(self):
        """Gets the points of this User.  # noqa: E501


        :return: The points of this User.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this User.


        :param points: The points of this User.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def content_filter(self):
        """Gets the content_filter of this User.  # noqa: E501


        :return: The content_filter of this User.  # noqa: E501
        :rtype: bool
        """
        return self._content_filter

    @content_filter.setter
    def content_filter(self, content_filter):
        """Sets the content_filter of this User.


        :param content_filter: The content_filter of this User.  # noqa: E501
        :type: bool
        """

        self._content_filter = content_filter

    @property
    def is_admin(self):
        """Gets the is_admin of this User.  # noqa: E501


        :return: The is_admin of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this User.


        :param is_admin: The is_admin of this User.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
